-- Сигнатура
-- map :: (a -> b) -> [a] -> [b]
-- (a -> b) — функция, которая преобразует элемент типа a в элемент типа b.
-- [a] — исходный список элементов типа a.
-- [b] — новый список элементов типа b.

-- Пример использования
doubleList :: [Int] -> [Int]
doubleList = map (* 2)  -- Удваивает каждый элемент в списке

-- Сигнатура
-- filter :: (a -> Bool) -> [a] -> [a]
-- (a -> Bool) — предикат, который проверяет выполнение условия для каждого элемента.
-- [a] — исходный список.
-- [a] — новый список, содержащий только те элементы, для которых предикат вернул True.

-- Пример использования
evenNumbers :: [Int] -> [Int]
evenNumbers = filter even  -- Оставляет только четные числа

-- Сигнатура foldr
-- foldr :: (a -> b -> b) -> b -> [a] -> b
-- (a -> b -> b) — функция, которая принимает текущий элемент списка a и промежуточное значение b, возвращая обновленное значение b.
-- b — начальное значение аккумулятора.
-- [a] — исходный список.
-- b — окончательное свернутое значение.

-- Пример использования foldr
sumList :: [Int] -> Int
sumList = foldr (+) 0  -- Складывает все элементы списка

productList :: [Int] -> Int
productList = foldl (*) 1  -- Умножает все элементы списка

-- Сигнатура
-- zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]
-- (a -> b -> c) — функция, которая объединяет элементы двух списков.
-- [a] и [b] — исходные списки.
-- [c] — новый список, полученный объединением.

-- Пример использования:
addLists :: [Int] -> [Int] -> [Int]
addLists = zipWith (+)  -- Складывает соответствующие элементы двух списков


main = do
    putStrLn "Result doubleList [1, 2, 3]:"
    print $ doubleList [1, 2, 3]         -- Результат: [2, 4, 6]
    putStrLn "Result evenNumbers [1, 2, 3, 4, 5]:"
    print $ evenNumbers [1, 2, 3, 4, 5]  -- Результат: [2, 4]
    putStrLn "Result sumList [1, 2, 3, 4]:"
    print $ sumList [1, 2, 3, 4]         -- Результат: 10
    putStrLn "Result productList [1, 2, 3, 4]:"
    print $ productList [1, 2, 3, 4]     -- Результат: 24
    putStrLn "Result addLists [1, 2, 3] [4, 5, 6]:"
    print $ addLists [1, 2, 3] [4, 5, 6] -- Результат: [5, 7, 9]